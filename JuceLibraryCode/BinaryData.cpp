/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

namespace BinaryData
{

//================== keywords.txt ==================
static const unsigned char temp_binary_data_0[] =
"#######################################\n"
"# Syntax Coloring Map For Base64\n"
"#######################################\n"
"\n"
"#######################################\n"
"# Datatypes (KEYWORD1)\n"
"#######################################\n"
"\n"
"# I WANT BASE64.h HIGHLIGHTED, DAMMIT!\n"
"Base64\t\tKEYWORD1\n"
"\n"
"#######################################\n"
"# Methods and Functions (KEYWORD2)\n"
"#######################################\n"
"\n"
"base64_encode \tKEYWORD2\n"
"base64_decode \tKEYWORD2\n"
"base64_enc_len \tKEYWORD2\n"
"base64_dec_len \tKEYWORD2\n"
"\n"
"#######################################\n"
"# Constants (LITERAL1)\n"
"#######################################\n"
"\n";

const char* keywords_txt = (const char*) temp_binary_data_0;

//================== LICENSE ==================
static const unsigned char temp_binary_data_1[] =
"Copyright (C) 2013 Adam Rudd\n"
"\n"
"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, mo"
"dify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n"
"\n"
"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n"
"\n"
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOL"
"DERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n";

const char* LICENSE = (const char*) temp_binary_data_1;

//================== README.markdown ==================
static const unsigned char temp_binary_data_2[] =
"Introduction\n"
"------------\n"
"\n"
"This library provides methods for encoding binary into base64 strings and the reverse operation.";

const char* README_markdown = (const char*) temp_binary_data_2;

//================== CMakeLists.txt ==================
static const unsigned char temp_binary_data_3[] =
"cmake_minimum_required(VERSION 2.6)\n"
"project(PluginParameters)\n"
"\n"
"set(CMAKE_INCLUDE_CURRENT_DIR TRUE)\n"
"include_directories(${CMAKE_SOURCE_DIR}/include)\n"
"include_directories(${CMAKE_SOURCE_DIR}/include/tinythread)\n"
"include_directories(${CMAKE_SOURCE_DIR}/include/readerwriterqueue)\n"
"\n"
"if(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n"
"  add_definitions(-DLINUX=1)\n"
"  set(CMAKE_C_FLAGS \"-fmessage-length=0 -m32 -pipe -Wno-trigraphs -std=c99 -O3 -Wmissing-field-initializers -Wall -Wreturn-type -Wunused-variable -pedantic -Wshadow -Wsign-compare -D__cdecl=\\\"\\\" -D_POSIX_C_SOURCE=200809L\")\n"
"  set(CMAKE_CXX_FLAGS \"-fmessage-length=0 -m32 -pipe -Wno-trigraphs -std=c++11 -O3 -Wmissing-field-initializers -Wall -Wreturn-type -Wunused-variable -pedantic -Wshadow -Wsign-compare -D__cdecl=\\\"\\\"\")\n"
"  set(CMAKE_EXE_LINKER_FLAGS \"-m32\")\n"
"elseif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n"
"  set(CMAKE_C_COMPILER \"clang\")\n"
"  set(CMAKE_CXX_COMPILER \"clang++\")\n"
"  add_definitions(-DMACOSX=1)\n"
"  set(CMAKE_C_FLAGS \"-arch i386 -fmessage-length=0 -pipe -Wno-trigraphs -fpascal-strings -std=c99 -Wmissing-field-initializers -Wall -Wmissing-prototypes -Wreturn-type -Wunused-variable -pedantic -Wshadow -Wsign-compare -Wnewline-eof -Wshorten-64-to"
"-32 -fasm-blocks -mmacosx-version-min=10.7\")\n"
"  set(CMAKE_CXX_FLAGS \"-arch i386 -fmessage-length=0 -pipe -Wno-trigraphs -fpascal-strings -stdlib=libc++ -std=c++11 -Wmissing-field-initializers -Wall -Wmissing-prototypes -Wreturn-type -Wunused-variable -pedantic -Wshadow -Wsign-compare -Wnewline-"
"eof -Wshorten-64-to-32 -fasm-blocks -mmacosx-version-min=10.7\")\n"
"  set(CMAKE_EXE_LINKER_FLAGS \"-arch i386 -framework Carbon -framework CoreFoundation\")\n"
"elseif(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n"
"  add_definitions(/DWIN32=1)\n"
"  set(CMAKE_C_FLAGS \"\")\n"
"  # /EHsc is needed\n"
"  set(CMAKE_CXX_FLAGS \"/EHsc\")\n"
"endif()\n"
"\n"
"if(\"${UNIX}\")\n"
"  if(CMAKE_BUILD_TYPE MATCHES \"Debug\")\n"
"    add_definitions(\"-O0\")\n"
"    add_definitions(\"-g\")\n"
"    add_definitions(\"-DDEBUG=1\")\n"
"  else()\n"
"    add_definitions(\"-O2\")\n"
"  endif()\n"
"endif(\"${UNIX}\")\n"
"\n"
"add_subdirectory(test)\n"
"\n";

const char* CMakeLists_txt = (const char*) temp_binary_data_3;

//================== LICENSE.md ==================
static const unsigned char temp_binary_data_4[] =
"This license applies to all the code in this repository except that written by third\n"
"parties, namely the files in benchmarks/ext, which have their own licenses.\n"
"\n"
"Copyright (c) 2013, Cameron Desrochers  \n"
"All rights reserved.\n"
"\n"
"Redistribution and use in source and binary forms, with or without modification,\n"
"are permitted provided that the following conditions are met:\n"
"\n"
"- Redistributions of source code must retain the above copyright notice, this list of\n"
"conditions and the following disclaimer.\n"
"- Redistributions in binary form must reproduce the above copyright notice, this list of\n"
"conditions and the following disclaimer in the documentation and/or other materials\n"
"provided with the distribution.\n"
"\n"
"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\n"
"EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n"
"MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n"
"THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n"
"SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\n"
"OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n"
"HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n"
"TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n"
"EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n";

const char* LICENSE_md = (const char*) temp_binary_data_4;

//================== README.md ==================
static const unsigned char temp_binary_data_5[] =
"# A single-producer, single-consumer lock-free queue for C++\n"
"\n"
"This mini-repository has my very own implementation of a lock-free queue (that I designed from scratch) for C++.\n"
"\n"
"It only supports a two-thread use case (one consuming, and one producing). The threads can't switch roles, though\n"
"you could use this queue completely from a single thread if you wish (but that would sort of defeat the purpose!).\n"
"\n"
"Note: If you need a general purpse multi-producer, multi-consumer lock free queue, I have [one of those too][mpmc].\n"
"\n"
"\n"
"## Features\n"
"\n"
"- [Blazing fast][benchmarks]\n"
"- Compatible with C++11 (supports moving objects instead of making copies)\n"
"- Fully generic (templated container of any type) -- just like `std::queue`, you never need to allocate memory for elements yourself\n"
"  (which saves you the hassle of writing a lock-free memory manager to hold the elements you're queueing)\n"
"- Allocates memory up front, in contiguous blocks\n"
"- Provides a `try_enqueue` method which is guaranteed never to allocate memory (the queue starts with an initial capacity)\n"
"- Also provides an `enqueue` method which can dynamically grow the size of the queue as needed\n"
"- Completely \"wait-free\" (no compare-and-swap loop). Enqueue and dequeue are always O(1) (not counting memory allocation)\n"
"- On x86, the memory barriers compile down to no-ops, meaning enqueue and dequeue are just a simple series of loads and stores (and branches)\n"
"\n"
"\n"
"## Use\n"
"\n"
"Simply drop the readerwriterqueue.h and atomicops.h files into your source code and include them :-)\n"
"A modern compiler is required (MSVC2010+, GCC 4.7+, ICC 13+, or any C++11 compliant compiler should work).\n"
"\n"
"Note: If you're using GCC, you really do need GCC 4.7 or above -- [4.6 has a bug][gcc46bug] that prevents the atomic fence primitives\n"
"from working correctly.\n"
"\n"
"Example:\n"
"\n"
"    using namespace moodycamel;\n"
"    \n"
"    ReaderWriterQueue<int> q(100);       // Reserve space for at least 100 elements up front\n"
"    \n"
"    q.enqueue(17);                       // Will allocate memory if the queue is full\n"
"    bool succeeded = q.try_enqueue(18);  // Will only succeed if the queue has an empty slot (never allocates)\n"
"    assert(succeeded);\n"
"    \n"
"    int number;\n"
"    succeeded = q.try_dequeue(number);  // Returns false if the queue was empty\n"
"    \n"
"    assert(succeeded && number == 17);\n"
"    \n"
"    // You can also peek at the front item of the queue (consumer only)\n"
"    int* front = q.peek();              // Returns nullptr if the queue was empty\n"
"    assert(front == nullptr);\n"
"    \n"
"    \n"
"## Disclaimers\n"
"\n"
"The queue should only be used on platforms where aligned integer and pointer access is atomic; fortunately, that\n"
"includes all modern processors (e.g. x86/x86-64, ARM, and PowerPC). *Not* for use with a DEC Alpha processor (which has very weak memory ordering) :-)\n"
"\n"
"Note that it's only been tested on x86(-64); if someone has access to other processors I'd love to run some tests on\n"
"anything that's not x86-based.\n"
"\n"
"Finally, I am not an expert. This is my first foray into lock-free programming, and though I'm confident in the code,\n"
"it's possible that there are bugs despite the effort I put into designing and testing this data structure.\n"
"\n"
"Use this code at your own risk; in particular, lock-free programming is a patent minefield, and this code may very\n"
"well violate a pending patent (I haven't looked). It's worth noting that I came up with this algorithm and\n"
"implementation from scratch, independent of any existing lock-free queues.\n"
"\n"
"\n"
"## More info\n"
"\n"
"See the [LICENSE.md][license] file for the license (simplified BSD).\n"
"\n"
"My [blog post][blog] introduces the context that led to this code, and may be of interest if you're curious\n"
"about lock-free programming.\n"
"\n"
"\n"
"[blog]: http://moodycamel.com/blog/2013/a-fast-lock-free-queue-for-c++\n"
"[license]: LICENSE.md\n"
"[benchmarks]: http://moodycamel.com/blog/2013/a-fast-lock-free-queue-for-c++#benchmarks\n"
"[gcc46bug]: http://stackoverflow.com/questions/16429669/stdatomic-thread-fence-has-undefined-reference\n"
"[mpmc]: https://github.com/cameron314/concurrentqueue\n";

const char* README_md = (const char*) temp_binary_data_5;

//================== mkbuild.sh ==================
static const unsigned char temp_binary_data_6[] =
"#!/bin/bash\n"
"\n"
"# ----------------------------------------------------------------------------------------\n"
"# Copyright (c) 2010-2012 Marcus Geelnard\n"
"#\n"
"# This software is provided 'as-is', without any express or implied\n"
"# warranty. In no event will the authors be held liable for any damages\n"
"# arising from the use of this software.\n"
"#\n"
"# Permission is granted to anyone to use this software for any purpose,\n"
"# including commercial applications, and to alter it and redistribute it\n"
"# freely, subject to the following restrictions:\n"
"#\n"
"#     1. The origin of this software must not be misrepresented; you must not\n"
"#     claim that you wrote the original software. If you use this software\n"
"#     in a product, an acknowledgment in the product documentation would be\n"
"#     appreciated but is not required.\n"
"#\n"
"#     2. Altered source versions must be plainly marked as such, and must not be\n"
"#     misrepresented as being the original software.\n"
"#\n"
"#     3. This notice may not be removed or altered from any source\n"
"#     distribution.\n"
"# ----------------------------------------------------------------------------------------\n"
"\n"
"# Name of the distribution\n"
"distname=TinyThread++-1.2\n"
"\n"
"# Build all the necessary files\n"
"echo Building documentation...\n"
"cd doc\n"
"rm -f html/*\n"
"doxygen\n"
"cd ..\n"
"\n"
"# Set up a temporary directory\n"
"tmproot=/tmp/tinythread-$USER-$$\n"
"mkdir $tmproot\n"
"tmpdir=$tmproot/$distname\n"
"mkdir $tmpdir\n"
"\n"
"# Copy files\n"
"echo Copying files to $tmpdir...\n"
"mkdir $tmpdir/source\n"
"mkdir $tmpdir/test\n"
"mkdir $tmpdir/doc\n"
"mkdir $tmpdir/doc/html\n"
"cp *.txt $tmpdir/\n"
"cp source/*.h source/*.cpp $tmpdir/source/\n"
"cp test/Makefile* test/*.h test/*.cpp $tmpdir/test/\n"
"cp doc/Doxyfile $tmpdir/doc\n"
"cp doc/html/* $tmpdir/doc/html\n"
"\n"
"# Create archives\n"
"olddir=`pwd`\n"
"cd $tmproot\n"
"tar -cvf $distname-src.tar $distname\n"
"bzip2 -9 $distname-src.tar\n"
"zip -9r $distname-src.zip $distname\n"
"cd $olddir\n"
"cp $tmproot/*.bz2 $tmproot/*.zip ./\n"
"\n"
"# Remove temporary directory\n"
"rm -rf $tmproot\n"
"\n";

const char* mkbuild_sh = (const char*) temp_binary_data_6;

//================== README.txt ==================
static const unsigned char temp_binary_data_7[] =
"TinyThread++ v1.2\n"
"=================\n"
"\n"
"http://tinythreadpp.bitsnbites.eu\n"
"\n"
"\n"
"About\n"
"-----\n"
"\n"
"TinyThread++ is a minimalist, portable, threading library for C++, intended to\n"
"make it easy to create multi threaded C++ applications.\n"
"\n"
"The library is closesly modeled after the C++11 standard, but only a subset is\n"
"implemented at the moment.\n"
"\n"
"See the documentation in the doc/html directory for more information.\n"
"\n"
"\n"
"Using TinyThread++\n"
"------------------\n"
"\n"
"To use TinyThread++ in your own project, just add tinythread.cpp and\n"
"tinythread.h to your project. In your own code, do:\n"
"\n"
"#include <tinythread.h>\n"
"using namespace tthread;\n"
"\n"
"If you wish to use the fast_mutex class, inlude fast_mutex.h:\n"
"\n"
"#include <fast_mutex.h>\n"
"\n"
"\n"
"Building the test programs\n"
"--------------------------\n"
"\n"
"From the test folder, issue one of the following commands:\n"
"\n"
"Linux, Mac OS X, OpenSolaris etc:\n"
"  make   (you may need to use gmake on some systems)\n"
"\n"
"Windows/MinGW:\n"
"  mingw32-make\n"
"\n"
"Windows/MS Visual Studio:\n"
"  nmake /f Makefile.msvc\n"
"\n"
"\n"
"History\n"
"-------\n"
"\n"
"v1.2 - ????.??.??\n"
"  - Fixed dangling references bug in thread::detach() mechanism.\n"
"  - Added atomic<T> class.\n"
"  - Added atomic_flag class.\n"
"\n"
"v1.1 - 2012.05.07\n"
"  - Added thread::detach().\n"
"\n"
"v1.0 - 2010.10.01\n"
"  - First non-beta release.\n"
"  - Made mutex non-recursive (according to spec), and added recursive_mutex.\n"
"  - General class, code & documentation improvements.\n"
"  - Added a Makefile for MS Visual Studio.\n"
"\n"
"v0.9 - 2010.08.10\n"
"  - Added preliminary support for this_thread::sleep_for().\n"
"\n"
"v0.8 - 2010.07.02\n"
"  - Switched from CreateThread() to _beginthreadex() for Win32 (should fix\n"
"    tiny memory leaks).\n"
"  - Better standards compliance and some code cleanup.\n"
"\n"
"v0.7 - 2010.05.17\n"
"  - Added this_thread::yield().\n"
"  - Replaced the non-standard number_of_processors() function with\n"
"    thread::hardware_concurrency(), which is part of the C++0x draft.\n"
"  - The thread::id() class is now more standards compliant (correct namespace\n"
"    and comparison operators).\n"
"\n"
"v0.6 - 2010.04.28\n"
"  - Added a fast_mutex class (in fast_mutex.h).\n"
"  - Made the test.cpp application compile under Mac OS X and MinGW/g++ 3.x.\n"
"\n"
"v0.5 - 2010.03.31\n"
"  - Added the thread_local keyword (support for thread-local storage).\n"
"  - Added a test application to test the API (test.cpp).\n"
"  - Improved the Doxygen documentation.\n"
"\n"
"v0.4 - 2010.03.27\n"
"  - Added thread::get_id() and this_thread::get_id().\n"
"  - Changed the namespace name from tinythread to tthread.\n"
"\n"
"v0.3 - 2010.03.24\n"
"  - Fixed a compiler error for fractal.cpp under MS Visual C++.\n"
"  - Added colors to the fractal generator.\n"
"\n"
"v0.2 - 2010.03.23\n"
"  - Better C++0x conformance.\n"
"  - Better documentation.\n"
"  - New classes:\n"
"    - lock_guard\n"
"  - New member functions:\n"
"    - thread::joinable()\n"
"    - thread::native_handle()\n"
"    - mutex::try_lock()\n"
"  - Added a multi threaded fractal generator test application.\n"
"\n"
"v0.1 - 2010.03.21\n"
"  - Initial release.\n"
"\n"
"\n"
"License\n"
"-------\n"
"\n"
"Copyright (c) 2010-2012 Marcus Geelnard\n"
"\n"
"This software is provided 'as-is', without any express or implied\n"
"warranty. In no event will the authors be held liable for any damages\n"
"arising from the use of this software.\n"
"\n"
"Permission is granted to anyone to use this software for any purpose,\n"
"including commercial applications, and to alter it and redistribute it\n"
"freely, subject to the following restrictions:\n"
"\n"
"    1. The origin of this software must not be misrepresented; you must not\n"
"    claim that you wrote the original software. If you use this software\n"
"    in a product, an acknowledgment in the product documentation would be\n"
"    appreciated but is not required.\n"
"\n"
"    2. Altered source versions must be plainly marked as such, and must not be\n"
"    misrepresented as being the original software.\n"
"\n"
"    3. This notice may not be removed or altered from any source\n"
"    distribution.\n"
"\n";

const char* README_txt = (const char*) temp_binary_data_7;

//================== LICENSE.txt ==================
static const unsigned char temp_binary_data_8[] =
"Copyright (c) 2013 Teragon Audio. All rights reserved.\n"
" \n"
"Redistribution and use in source and binary forms, with or without\n"
"modification, are permitted provided that the following conditions are met:\n"
"\n"
"- Redistributions of source code must retain the above copyright notice,\n"
"  this list of conditions and the following disclaimer.\n"
"- Redistributions in binary form must reproduce the above copyright notice,\n"
"  this list of conditions and the following disclaimer in the documentation\n"
"  and/or other materials provided with the distribution.\n"
"\n"
"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n"
"AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n"
"IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n"
"ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n"
"LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n"
"CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n"
"SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n"
"INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n"
"CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n"
"ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n"
"POSSIBILITY OF SUCH DAMAGE.\n";

const char* LICENSE_txt = (const char*) temp_binary_data_8;

//================== README.md ==================
static const unsigned char temp_binary_data_9[] =
"PluginParameters\n"
"================\n"
"\n"
"PluginParameters is a simple library used to keep parameter information for an\n"
"audio plugin, such as a VST or AudioUnit. The need for this arises from the\n"
"fact that most plugins have a number of parameters they need to maintain, and\n"
"this information needs to be sent to various parts of the plugin's processing\n"
"code. The VST or AudioUnit side of things also needs to query this information\n"
"in a more structured manner, and this can lead to plugin code getting very\n"
"messy with huge `switch` blocks to get/set the correct value.\n"
"\n"
"\n"
"Features\n"
"--------\n"
"\n"
"* Provides a parameter database which supports the following data types:\n"
"  - BlobParameter\n"
"  - BooleanParameter\n"
"  - DecibelParameter\n"
"  - FloatParameter\n"
"  - FrequencyParameter\n"
"  - IntegerParameter\n"
"  - StringParameter\n"
"* For all parameter types, you can get the raw value (ie, the thing you\n"
"  probably need in your code to do useful stuff), or a scaled value between\n"
"  0.0 - 1.0. This makes PluginParameters ideal for use in VST plugins, which\n"
"  need a 0.0 - 1.0 representation of all data.\n"
"* The decibel parameter is represented internally as a linear value, which is\n"
"  more convenient for most audio processing work. Additionally, it is\n"
"  logarithmic, which is useful when fitting it to a knob or fader control.\n"
"* The frequency parameter uses logarithmic scaling for its value, so it is\n"
"  easier to select higher frequencies. This is particularly convenient for\n"
"  filters where one MIDI step would otherwise mean a difference of several\n"
"  hundred hertz.\n"
"* All parameters provide a minimum, maximum, and default value.\n"
"* All parameter types also have a function to get the displayable value as a\n"
"  string.\n"
"* Parameters have string unit suffixes for pretty-printing the value. For\n"
"  example, DecibelParameter automatically adds \"dB\" to the printed value, and\n"
"  FrequencyParameter adds \"Hz\" or \"kHz\", depending on the frequency.\n"
"* Parameters can have an unlimited number of observers, which will receive a\n"
"  callback when the parameter value is changed. Observers can be added or\n"
"  removed to a parameter at any time.\n"
"* Lookup of parameters can be done either by index or by name, with either the\n"
"  `get()` method or the square brackets (ie, `parameters[\"frequency\"]`).\n"
"* Small! Just a few hundred lines of code, and only one CPP file to add to your\n"
"  project (tinythread.cpp, which is from a third-party library). Simply include\n"
"  `PluginParameters.h` and you've got the whole library at your fingertips.\n"
"* Threadsafe! PluginParameters can be built to run in a multi-threaded\n"
"  environment ideal for audio plugins, with one high-priority audio thread and\n"
"  multiple low-priority threads for background tasks or GUI.\n"
"* The multi-threaded implementation is based on lock-free queues, and is\n"
"  completely mutex-free for high performance in realtime audio applications.\n"
"\n"
"\n"
"Usage (Single-Threaded)\n"
"-----------------------\n"
"\n"
"*Note*: As of PluginParameters version 3.0, the multi-threaded implementation is\n"
"the default. To use the single-threaded implementation, you will need to define\n"
"the following preprocessor definition in your project:\n"
"\n"
"```c++\n"
"#define PLUGINPARAMETERS_MULTITHREADED 0\n"
"#include \"PluginParameters.h\"\n"
"```\n"
"\n"
"Assuming that you've pointed your source to include `PluginParameters.h` and\n"
"everything compiles fine, your next step is to make a `ParameterSet` and add\n"
"some parameters to it. This should probably be done in your plugin's\n"
"constructor:\n"
"\n"
"```c++\n"
"MyPlugin::MyPlugin() {\n"
"  // Assumes that there is a ParameterSet member named \"parameters\" in\n"
"  // the header file.\n"
"  this->parameters.add(new BooleanParameter(\"Awesomeness\", true));\n"
"  this->parameters.add(new FrequencyParameter(\"Frequency\", 20.0, 20000.0, 10000.0);\n"
"  this->parameters.add(new DecibelParameter(\"Gain\", -60.0, 3.0, 0.0));\n"
"}\n"
"```\n"
"\n"
"For a VST plugin, a ton of boilerplate code regarding parameter values can be\n"
"eliminated and replaced with the following:\n"
"\n"
"```c++\n"
"float MyPlugin::getParameter(VstInt32 index) {\n"
"  return this->parameters[index]->getScaledValue();\n"
"}\n"
"\n"
"void MyPlugin::setParameter(VstInt32 index, float value) {\n"
"  this->parameters[index]->setScaledValue(value);\n"
"}\n"
"\n"
"void MyPlugin::getParameterName (VstInt32 index, char* label) {\n"
"  vst_strncpy(label, this->parameters[index]->getName().c_str(), kVstMaxParamStrLen);\n"
"}\n"
"\n"
"void MyPlugin::getParameterDisplay(VstInt32 index, char* text) {\n"
"  vst_strncpy(text, this->parameters[index]->getDisplayText().c_str(), kVstMaxParamStrLen);\n"
"}\n"
"```\n"
"\n"
"When you actually want to use the parameter data in your code, it might look\n"
"something like this:\n"
"\n"
"```c++\n"
"void MyPlugin::processReplacing (float** inputs, float** outputs, VstInt32 sampleFrames) {\n"
"  if(this->parameters[\"Awesomeness\"]->getValue()) {\n"
"    for(int i = 0; i < sampleFrames; i++) {\n"
"      *outputs[0][i] = *inputs[0][i] * this->parameters[\"Gain\"]->getValue();\n"
"      *outputs[1][i] = *inputs[1][i] * this->parameters[\"Gain\"]->getValue();\n"
"    }\n"
"  }\n"
"}\n"
"```\n"
"\n"
"Note: The above example code may look a bit different than your actual\n"
"implementation. It's just to give you a general idea as to how the library\n"
"should be used. For real-world examples of PluginParameters, check out the\n"
"source code for any of the [Teragon Audio plugins][4].\n"
"\n"
"\n"
"Usage (Multi-threaded)\n"
"----------------------\n"
"\n"
"If you intend on using PluginParameters in combination with a plugin GUI, then\n"
"you will need to use the multi-threaded features of PluginParameters. Attempting\n"
"to use the single-threaded version in a multi-threaded environment may result in\n"
"priority inversion (and thus, occaisional stuttering on the audio thread), or\n"
"race conditions caused by multiple objects attempting to get/set parameter\n"
"values.\n"
"\n"
"The multi-threaded mode must be enabled at compile-time like so:\n"
"\n"
"```c++\n"
"#define PLUGINPARAMETERS_MULTITHREADED 1\n"
"#include \"PluginParameters.h\"\n"
"```\n"
"\n"
"*Note*: As of PluginParameters version 3.0, the multi-threaded implementation is\n"
"the default; it is not necessary to force this definition anymore. Simply\n"
"including `PluginParameters.h` is enough.\n"
"\n"
"Some dependencies of the multi-threaded implementation require C++11 support,\n"
"so you may need to enable this for your compiler as necessary. Likewise, you\n"
"will need to add `tinythread.cpp` to the list of files compiled by your\n"
"project.\n"
"\n"
"When a `ConcurrentParameterSet` (which should be used instead of the standard\n"
"`PluginParameterSet`) is created by your plugin, it will create a new\n"
"low-priority background thread for asynchronous parameter events. This thread\n"
"will be automatically shut down and destroyed when the `ConcurrentParameterSet`\n"
"is destroyed.\n"
"\n"
"In multi-threaded mode, you may not directly modify parameter values. Instead,\n"
"you must schedule changes via an event dispatcher. Therefore a full\n"
"implementation would look something like this:\n"
"\n"
"In VST plugin's audio processing code:\n"
"\n"
"```c++\n"
"MyPlugin::MyPlugin() {\n"
"  // Assumes that there is a ConcurrentParameterSet member named\n"
"  // \"parameters\" in the header file.\n"
"  this->parameters.add(new BooleanParameter(\"Awesomeness\", true));\n"
"  this->parameters.add(new FrequencyParameter(\"Frequency\", 20.0, 20000.0, 10000.0);\n"
"  this->parameters.add(new DecibelParameter(\"Gain\", -60.0, 3.0, 0.0));\n"
"}\n"
"\n"
"void MyPlugin::process(float** inputs, float** outputs, long blocksize) {\n"
"  this->parameters.processRealtimeEvents();\n"
"  // Other processing code follows...\n"
"}\n"
"\n"
"float MyPlugin::getParameter(VstInt32 index) {\n"
"  return this->parameters[index]->getScaledValue();\n"
"}\n"
"\n"
"void MyPlugin::setParameter(VstInt32 index, float value) {\n"
"  this->parameters.setScaled(index, value);\n"
"}\n"
"\n"
"void MyPlugin::getParameterName (VstInt32 index, char* label) {\n"
"  vst_strncpy(label, this->parameters[index]->getName().c_str(), kVstMaxParamStrLen);\n"
"}\n"
"\n"
"void MyPlugin::getParameterDisplay(VstInt32 index, char* text) {\n"
"  vst_strncpy(text, this->parameters[index]->getDisplayText().c_str(), kVstMaxParamStrLen);\n"
"}\n"
"\n"
"void MyPlugin::suspend() {\n"
"  this->parameters.pause();\n"
"}\n"
"\n"
"void MyPlugin::resume() {\n"
"  this->parameters.resume();\n"
"}\n"
"```\n"
"\n"
"In plugin's GUI code:\n"
"\n"
"```c++\n"
"// This code will be highly implementation-specific, but basically let's\n"
"// assume that some GUI code is ready to set a parameter value after user\n"
"// interaction. However in this example we'll assume that the GUI also wants\n"
"// to be notified about updates to the parameter, so it therefore would\n"
"// implement PluginParameterObserver.\n"
"MyGui::onValueUpdated(int index, float newValue) {\n"
"  // We must pass \"this\" as the last argument so we don't notify ourselves\n"
"  // when sending parameter changes to the audio thread.\n"
"  this->parameters.set(index, newValue, this);\n"
"}\n"
"\n"
"bool MyGui::isRealtimePriority() const {\n"
"  return false;\n"
"}\n"
"\n"
"void MyGui::onParameterUpdated(const PluginParameter* parameter) {\n"
"  // Update widget to reflect parameter's new value\n"
"}\n"
"```\n"
"\n"
"You can also have parameter observers on the realtime thread. This can be\n"
"useful to recalculate cached values based on parameter data (like filter\n"
"coefficients, for example).\n"
"\n"
"Note that `ConcurrentParameterSet` *cannot* fully guarantee that the\n"
"asynchronous event thread will be ready to process events after the parameter\n"
"set itself is finished being constructed. In other words, never do this:\n"
"\n"
"```c++\n"
"// Assumes a member of type ThreadsafePluginParameterSet*, and a\n"
"// PluginParameterObserver* named observer.\n"
"void MyPlugin::initialize() {\n"
"  parameters = new ThreadsafePluginParameterSet();\n"
"  Parameter *p = new BooleanParameter(\"test\");\n"
"  p->addObserver(observer);\n"
"  parameters.add(p);\n"
"  parameters.set(\"test\", true); // BAD! Here we cannot guarantee that the\n"
"  // observer will be called. The easy fix is to simply call set() elsewhere\n"
"  // after this constructor exits.\n"
"\n"
"  // Also never do this:\n"
"  parameters = new ConcurrentParameterSet();\n"
"  delete parameters;\n"
"}\n"
"```\n"
"\n"
"The reason that this code is bad is because the low-priority event thread may\n"
"not be fully started when the call to `set()` has been made, and therefore the\n"
"parameter change would not be correctly scheduled on that thread. The only way\n"
"to guarantee this behavior would be to have a mutex within both `set()` and\n"
"`processRealtimeEvents()`, which has performance consequences for the audio\n"
"thread.\n"
"\n"
"That said, as long as you don't attempt to schedule parameter changes or destroy\n"
"the parameter set immediately after construction, `ConcurrentParameterSet`\n"
"should be safe and reliable to use. Also it should be noted that all `Parameter`\n"
"subclasses provide a constructor which allows you to set a default value, so it\n"
"shouldn't be necessary to schedule parameter changes immediately after\n"
"constructing the parameter set.\n"
"\n"
"\n"
"Testing\n"
"-------\n"
"\n"
"PluginParameters comes with a small test suite which is used to develop the\n"
"library as well as fix bugs. If you think you've found a bug in\n"
"PluginParameters, then please build the test suites and run it before reporting\n"
"a bug for your platform. The test suites are built using CMake, and generate two\n"
"executables, `pluginparametertest` and `multithreadedtest`.\n"
"\n"
"PluginParameters is built with [CMake][1] and should compile cleanly out of\n"
"the box. Building on unix platforms (including Mac OSX) is simply a matter of\n"
"running `cmake . ; make`. On Windows, one can run `cmake.exe -G \"Visual Studio\n"
"12\"` to generate a Visual Studio project file which can build the project.\n"
"\n"
"\n"
"License\n"
"-------\n"
"\n"
"PluginParameters is licensed under the BSD licnese. See the file `LICENSE.txt`\n"
"provided with the source code for more details. If built in multi-threaded mode,\n"
"then code from [TinyThread++][2] and [readerwriterqueue][3] is used. Please see\n"
"the respective license files for each of these libraries, which can be found in\n"
"the `include` directory.\n"
"\n"
"Finally, a big thanks to the authors of TinyThread++ and readerwriterqueue for\n"
"making this library possible. Writing multi-threaded code is hard!\n"
"\n"
"\n"
"[1]: http://www.cmake.org\n"
"[2]: http://tinythreadpp.bitsnbites.eu\n"
"[3]: https://github.com/cameron314/readerwriterqueue\n"
"[4]: https://github.com/teragonaudio\n";

const char* README_md2 = (const char*) temp_binary_data_9;


const char* getNamedResource (const char*, int&) throw();
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes) throw()
{
    unsigned int hash = 0;
    if (resourceNameUTF8 != 0)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0xa24fac5b:  numBytes = 594; return keywords_txt;
        case 0x34bc1021:  numBytes = 1053; return LICENSE;
        case 0xf8366460:  numBytes = 123; return README_markdown;
        case 0x90e15cf5:  numBytes = 2032; return CMakeLists_txt;
        case 0xc91a6275:  numBytes = 1458; return LICENSE_md;
        case 0x64791dc8:  numBytes = 4015; return README_md;
        case 0xa6997d64:  numBytes = 1921; return mkbuild_sh;
        case 0x2aaab85f:  numBytes = 3767; return README_txt;
        case 0x5a320952:  numBytes = 1296; return LICENSE_txt;
        case 0x2aaa9b6a:  numBytes = 11869; return README_md2;
        default: break;
    }

    numBytes = 0;
    return 0;
}

const char* namedResourceList[] =
{
    "keywords_txt",
    "LICENSE",
    "README_markdown",
    "CMakeLists_txt",
    "LICENSE_md",
    "README_md",
    "mkbuild_sh",
    "README_txt",
    "LICENSE_txt",
    "README_md2"
};

}
